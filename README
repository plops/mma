These are the two main files for now:

run-gui.lisp:
	open connection to mma control software
	(hard realtime) lcos display
	zeiss focus stage
  	(non-realtime) display
	logic for synchronizing all devices
	readout code for the clara (the history also contains code for scmos)
	        
run-clara.lisp:	
	initialization code for clara cameera
	after running the camera will be externally triggered
	cooled to -20 degree (I always set manually to -55 degree, takes 15 min to cool from +30)
	exposure time is set to exactly capture 23 lcos pulses
	set region of interest to the area selected by the optomask
	fast readout register

This is important if the camera or MEMI system was moved:
run-camera-lcos-calibration.lisp:
	display spots on lcos
	capture images on camera
	find maxima
	print equation system for solution with maxima
	the result are a rotation angle, a scaling factor and a translation vector between lcos and camera
	see run-gui.lisp load-cam-to-lcos-matrix of how this can be stored in a 4x4 opengl matrix



Here is a short summary of what the directories and files do,
in order to learn more about a particular file, call git log 'file'


aquisitor/
	This code plans the acquisition of one stack so that we know beforehand when to move the stage


focus/
	serial communication to axiovert 200 M for moving the stage
	I looked used the micromanager device adapter as a reference


vol/
	vector math
	functions to simplify image and volume processing (convert, normalize)
	fft (either fftw or cuda)
	convolution
	pgm output
	drawing of spheres, disks and ellipses


gui/
	exposes very simple interface to open an opengl window (with-gui and a draw function)
	the main advantage is that the draw function can be updated
	(if one is careful) while the system is running


libmma/
	c program to talk to mma device using libIPMS
	has a command line interface for uploading images, setting timings and trigger control
	use help to see available commands

glfw-server/
	c program to draw to an opengl window
	has a command line interface for drawing disks, gratings
	use help to see available commands

clara/
	foreign function interface to the andor library
	developed for clara but should work with ixon as well


andor3/
	foreign function interface to the andor scmos library
	this is much easier than the older clara library


mma/
	foreign function code to libIPMS
	this kind of works but isn't stable (I think there are linking issues)
	use libmma instead


bresenham/
	I wanted to draw 3D lines
	meanwhile the guy with the dipimage blog published a much nicer algorithm

frontend/
	trace rays through a model of spheres into the bfp
	this was my first attempt
	quite slow for many nuclei and doesn't consider refractive index of embedding medium
	I also tried to compare it with wave theory 
	modify psf by cutting out a shifted circle in bfp (note that this isn't the correct model for memi)
	(don't use)
	

import/
	import data from an ics file


lens/
	raytracer using the hwang paper for high na lenses
	eventually modified to take into accound index of embedding medium
	drawings are done with asymptote


psf/
	calculate widefield psf using the formulas from 1952 emil wolf
	I tried to reimplement ksimpsf but didn't understand their integration rule
	therefor here I'm using a sum to calculate the integral
	(don't use)

qng/
	port of gauss-kronrod adaptive integrator fortran code
	

otf/
	use adaptive integrator to calculate widefield psf
	also see incoh.lisp
	(I like that)


raytrace/
	intersection length of a ray with spheres
	(don't use)

	
simplex-anneal/
	one of my first optimization attempts
	ported from numerical recipes
	(don't use)

test/
	cubic interpolation that I wrote when I didn't have access to lisp
	and a cuda example to do and benchmark single-float fft

vector/
	vec and vec2 and matrix multiplication
	representation of vecrtors as arrays (with struct accessors)
	(don't use, use :vol)


new-run.lisp
	single stepping for debugging MMA problems with Joerg
	(problems never solved, don't use)


run-woropt.lisp and angular-illumination.lisp
	one of my first optimization attemps
	(don't use)


run.lisp
	code that I showed at the EU meeting

apotome.lisp
	attempt to simulate daniels project
	(never finished)

deconvolve.lisp
	attempt of a deconvolution
	(it never worked)

incoh.lisp
	calculate incoherent widefield psf with adaptive integrator


run-compare.lisp
	feb 2011 optimization with raytracing

run-ics.lisp
	import jy's confocal data
	blob detection
	and mp4 video creation for some talk in jan 2011

gauss.lisp
	my attempt to gaussian spot fitting
	this is just the initial estimate
	I didn't manage the iteration

compare-illum-modes.lisp and run-widefield.lisp
	for winter seminar feb 2011
	I think I compared clem and angular control



rayt/
	raytrace through high NA objective, taking into account non-matching embedding medium
	draw model and objective with asymptote
	also contains poisson disk sampling (but that isn't useful for the current problem)
